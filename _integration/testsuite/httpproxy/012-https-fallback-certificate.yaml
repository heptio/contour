# This check depends on the `--watch=configmaps` argument being given
# to integration-tester.

import data.contour.resources
import data.contour.resources.configmap

Namespace := "projectcontour"
Config := sprintf("%s/contour",[Namespace])

get_fallback() = fallback {
  conf := configmap.get_data(Config)
  contour := yaml.unmarshal(object.get(conf, "contour.yaml", "{}"))
  tls := object.get(contour, "tls", {})
  fallback := object.get(tls, "fallback-certificate", {})
}

# Skip if the configmap isn't present.
skip[msg] {
  not resources.is_present("configmaps", Config)
  msg := sprintf("Contour is not installed in the %q namespace", [Namespace])
}

skip[msg] {
  fallback := get_fallback()
  is_null(fallback) # fallback-certificate is an empty (nil) YAML map
  msg := "Contour fallback certificate is not configured"
}

skip[msg] {
  fallback := get_fallback()
  not is_null(fallback)

  # Skip if there's no fallback certificate name.
  object.get(fallback, "name", "") == ""

  msg := "Contour fallback certificate is not configured"
}

---

apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: echo-cert
spec:
  dnsNames:
  - echo.projectcontour.io
  secretName: echo
  issuerRef:
    name: selfsigned
    kind: ClusterIssuer

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: echo

---

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: echo
spec:
  virtualhost:
    fqdn: echo.projectcontour.io
    tls:
      secretName: echo
      enableFallbackCertificate: true
  routes:
  - services:
    - name: echo
      port: 80

---

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.request
import data.contour.http.expect

Response := client.Get({
  "url": url.https(sprintf("/fallback/%d", [time.now_ns()])),
  "headers": {
    "Host": "echo.projectcontour.io",
    "User-Agent": client.ua("fallback-certificate"),
  },
  "tls_insecure_skip_verify": true,
  "tls_server_name": "echo.projectcontour.io",
})

check_for_status_code [msg] {
  msg := expect.response_status_is(Response, 200)
}

check_for_service_routing [msg] {
  msg := expect.response_service_is(Response, "echo")
}

---

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.request
import data.contour.http.expect

Response := client.Get({
  "url": url.https(sprintf("/fallback/%d", [time.now_ns()])),
  "headers": {
    "Host": "echo.projectcontour.io",
    "User-Agent": client.ua("fallback-certificate"),
  },
  "tls_insecure_skip_verify": true,
  "tls_server_name": client.target_addr,
})

check_for_status_code [msg] {
  msg := expect.response_status_is(Response, 200)
}

check_for_service_routing [msg] {
  msg := expect.response_service_is(Response, "echo")
}
