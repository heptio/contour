# Copyright Project Contour Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
$apply: fixture

---

apiVersion: v1
kind: Service
metadata:
  name: httpbin
$apply: fixture

---

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: healthcheck
spec:
  virtualhost:
    fqdn: healthcheck.projectcontour.io
  routes:
  - services:
    - name: httpbin
      port: 80

---

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.response
import data.builtin.result

Response := client.Get({
  "url": url.http("/status/200"),
  "headers": {
    "Host": "healthcheck.projectcontour.io",
    "User-Agent": client.ua("http-health-checks"),
  },
})

check [r] {
  response.status_is(Response, 200)
  r := result.Pass("got status 200")
}

check [r] {
  not response.status_is(Response, 200)
  r := result.Errorf("got status %d, wanted %d", [response.status_code(Response), 200])
}

---

# Set a health check that always fails. This should make the service
# globally unavailable.

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: healthcheck
spec:
  routes:
  - services:
    - name: httpbin
      port: 80
    healthCheckPolicy:
      path: /status/418

---

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.response
import data.builtin.result

Response := client.Get({
  "url": url.http("/status/200"),
  "headers": {
    "Host": "healthcheck.projectcontour.io",
    "User-Agent": client.ua("http-health-checks"),
  },
})

check [r] {
  response.status_is(Response, 503)
  r := result.Pass("got status 503")
}

check [r] {
  not response.status_is(Response, 503)
  r := result.Errorf("got status %d, wanted %d", [response.status_code(Response), 503])
}

---

# Reset the health check to make it available again.

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: healthcheck
spec:
  routes:
  - services:
    - name: httpbin
      port: 80
    healthCheckPolicy:
      path: /status/200

---

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.response
import data.builtin.result

Response := client.Get({
  "url": url.http("/status/200"),
  "headers": {
    "Host": "healthcheck.projectcontour.io",
    "User-Agent": client.ua("http-health-checks"),
  },
})

check [r] {
  response.status_is(Response, 200)
  r := result.Pass("got status 200")
}

check [r] {
  not response.status_is(Response, 200)
  r := result.Errorf("got status %d, wanted %d", [response.status_code(Response), 200])
}
