# Copyright Project Contour Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply: fixture

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply: fixture

---

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: echo
spec:
  virtualhost:
    fqdn: echo.projectcontour.io
  routes:
    - conditions:
      - prefix: /
      services:
        - name: ingress-conformance-echo
          port: 80

---

RunId := data.test.params["run-id"]

error_pod_unready [msg] {
  pod := data.resources.pods[_]

  object.get(pod.metadata.labels, "app.kubernetes.io/name", "") == "ingress-conformance-echo"
  object.get(pod.metadata.annotations, "integration-tester/run-id", "") == RunId

  # Find combinations of _ and i where the condition is Ready/True.
  cond := pod.status.conditions[i]
  cond.type == "Ready"
  cond.status != "True"

  msg := sprintf("pod %s is not ready: %s", [pod.metadata.name, cond.message])
}

---

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.expect

Response := client.Get({
  "url": url.http(sprintf("/pre-delete/%d", [time.now_ns()])),
  "headers": {
    "Host": "echo.projectcontour.io",
    "User-Agent": client.ua("pod-restart"),
  },
})

check_for_response_status [msg] {
  msg := expect.response_status_is(Response, 200)
}

check_for_service_routing [msg] {
  msg := expect.response_service_is(Response, "ingress-conformance-echo")

}

---

apiVersion: v1
kind: Pod
metadata:
  labels:
    app.kubernetes.io/name: ingress-conformance-echo
$apply: delete

---

# Wait for the deleted pod to actually delete.
error_pod_exists [msg] {
  last := data.resources.applied.last
  pod := data.resources.pods[_]

  pod.metadata.name == last.metadata.name

  msg := sprintf("pod %s still exists", [pod.metadata.name])
}

---

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.expect
import data.contour.http.response


Response := client.Get({
  "url": url.http(sprintf("/post-delete/%d", [time.now_ns()])),
  "headers": {
    "Host": "echo.projectcontour.io",
    "User-Agent": client.ua("pod-restart"),
  },
})

check_for_status_code [msg] {
  msg := expect.response_status_is(Response, 200)
}

check_for_service_routing [msg] {
  msg := expect.response_service_is(Response, "ingress-conformance-echo")
}

error[msg] {
  pod := response.pod(Response)

  not data.resources.pods[pod]
  msg := sprintf("no pod for pod name %q", [pod])
}
