# Copyright Project Contour Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

apiVersion: v1
kind: Namespace
metadata:
  name: app

---

apiVersion: v1
kind: Namespace
metadata:
  name: admin

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: app/echo-app

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: app/echo-app

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: admin/echo-admin

---

apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
$apply:
  fixture:
    as: admin/echo-admin

---

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: echo-app
  namespace: app
spec:
  routes:
  - services:
    - name: echo-app
      port: 80

---

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: echo-admin
  namespace: admin
spec:
  routes:
  - services:
    - name: echo-admin
      port: 80

---

apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
   name: echo
spec:
  virtualhost:
    fqdn: echo.projectcontour.io
  includes:
  - name: echo-app
    namespace: app
    conditions:
    - prefix: /
  - name: echo-admin
    namespace: admin
    conditions:
    - prefix: /admin

---

import data.contour.resources

fatal_proxy_is_not_valid[msg] {
  name := "echo"
  proxy := resources.get("httpproxies", name)
  status := object.get(proxy, "status", {})

  object.get(status, "currentStatus", "") != "valid"

  msg := sprintf("HTTPProxy '%s' is not valid\n%s", [
    name, yaml.marshal(status)
  ])
}

---

import data.contour.http.client
import data.contour.http.client.url
import data.contour.http.expect

cases := {
  { "path": "/", "service": "echo-app" },
  { "path": "/app", "service": "echo-app" },
  { "path": "/admin", "service": "echo-admin" },
  { "path": "/admin/", "service": "echo-admin" },
  { "path": "/admin/app", "service": "echo-admin" },
}

responses[{"service": service, "response": response}] {
  case := cases[_]

  path:= case.path
  service := case.service
  response := client.Get({
    "url": url.http(case.path),
    "headers": {
      "Host": "echo.projectcontour.io",
      "User-Agent": client.ua("include-prefix-condition"),
    }
  })
}

error_missing_response {
  count(responses) != count(cases)
}

check_for_service_routing [msg] {
  r := responses[_]

  msg := expect.response_service_is(r.response, r.service)
}
